h1. Sukyky

Open source J2EE performance training project implemented with Spring MVC.

h2. Setting up

h5. 1) Clone

bc. git clone git@github.com:huljas/sukyky.git

h5. 2) Build

bc. cd sukyky
mvn install

h5. 3) Configure database

You will need a MySQL Community Server, download it "here":http://dev.mysql.com/downloads/mysql/

bc. vi stock-trade/src/main/resources/database.properties

h5. 4) Create database

bc. cd stock-trade
mvn db-migration:drop db-migration:create db-migration:migrate

h5. 5) Run

bc. mvn jetty:run
...
[INFO] Started Jetty Server

h5. 6) Open web browser

bc. http://localhost:8080/
(might take a while ...)

h5. 7) Install and open JMeter

bc. cd ../jmeter-client
ant jmeter
(intalls and starts JMeter)

h2. Tools

h3. JMeter test client

"JMeter":http://jmeter.apache.org/

"Jmeter-plugins":http://code.google.com/p/jmeter-plugins/

h4. Starting up

bc. cd jmeter-client
ant jmeter

_This installs and starts the client._

Next select File - Open and open the file in

bc. jmeter-client/src/test/jmeter/Basic.xml

h3. Jamon monitoring API

"Jamon Api":http://jamonapi.sourceforge.net/

h4. Collecting data

The data can be collected with the following code:

bc. Monitor monitor = MonitorFactory.start("Label name");
try {
// code to monitor
} finally {
  monitor.stop();
}

To simplify the *jamon-monitor* project contains a <code>@Jamon</code> annotation which can be used to mark a class or method for monitoring.

h4. Monitoring

The example application comes with a Jamon admin page in address:

bc. http://localhost:8080/jamon/admin

h3. Java SE tools

h4. jconsole

"Java monitoring and management console":http://docs.oracle.com/javase/6/docs/technotes/tools/share/jconsole.html

h4. jmap

"Memory map":http://docs.oracle.com/javase/6/docs/technotes/tools/share/jmap.html

Checking heap histogram

bc. jmat -histo:live <pid>

h2. Exercises

General tips:

* Measure, don't guess
* Use <code>@Jamon</code> annotation to get better understanding of the problem
* Measure again after each change

h3. 1. Slow front page

Find out why the loading the front page takes so long and fix it.

Goal: Front page response time *less than 100ms*.

h3. 2. No throughput

Find out why the throughput doesn't increase as the number of threads increases and fix it.

Goal: Throughput of front page and stock page *over 500req/s*.

h3. 3. Stability

Site has had some stability problems in production. See if you can find out the cause.







